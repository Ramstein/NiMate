# import bpy
# from bpy.props import * # for properties

import time, math
import socket
import struct

# This is Blender specific
# import mathutils

# from the py
# The Sign Language Synthesis and Interaction Research Tools
#    Copyright (C) 2014  Fabrizio Nunnari, Alexis Heloir, DFKI
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# Set of names used to directly drive MakeHuman skeleton bones.
#


# MH_HAND_CONTROLLER_R = "hand.ik.R"
# MH_HAND_CONTROLLER_L = "hand.ik.L"
# MH_ELBOW_CONTROLLER_base = "elbow.pt.ik"
# MH_ELBOW_CONTROLLER_R = MH_ELBOW_CONTROLLER_base+".R"
# MH_ELBOW_CONTROLLER_L = MH_ELBOW_CONTROLLER_base+".L"
#
# MH_ARM_CONTROLLERS = [
#                       MH_HAND_CONTROLLER_R,
#                       MH_HAND_CONTROLLER_L,
#                       MH_ELBOW_CONTROLLER_R,
#                       MH_ELBOW_CONTROLLER_L
#                       ]


# 25 Facial control rigs. Listed from top to bottom, inner to outer, right first.
# Don't change the order! It matters for some applications.
# MH_FACIAL_CONTROLLERS = [
#                   "p_brow_mid",     # 0
#                   "p_brow_in.R",
#                   "p_brow_in.L",
#                   "p_brow_out.R",
#                   "p_brow_out.L",
#
#                   "p_up_lid.R",     #5
#                   "p_up_lid.L",
#                   "p_lo_lid.R",
#                   "p_lo_lid.L",
#
#                   "p_nose",         # 9
#                   "p_cheek.R",
#                   "p_cheek.L",
#
#                   "p_up_lip_mid",   # 12
#                   "p_up_lip.R",
#                   "p_up_lip.L",
#                   "p_lo_lip_mid",
#                   "p_lo_lip.R",
#                   "p_lo_lip.L",
#
#                   "p_mouth_mid",    # 18
#                   "p_mouth_in.R",
#                   "p_mouth_in.L",
#                   "p_mouth_out.R",
#                   "p_mouth_out.L",
#
#                   "p_tongue",       #23
#
#                   "p_jaw",          #24
#
#                   #"p_face"   # Main box reference for facial pose_bones. Not really affecting expressions.
#
#                   ]

# # 4 controllers for the eyelids. Listed from top to bottom, right first.
# # Don't change the order! It matters for some applications.
# MH_EYELID_CONTROLLERS = [
# 			"uplid.R",
# 			"uplid.L",
# 			"lolid.R",
# 			"lolid.L",
# ]
#
#
#
# MH_LEG_CONTROLLER_R = "foot.ik.R"
# MH_LEG_CONTROLLER_L = "foot.ik.L"
# MH_KNEE_CONTROLLER_R = "knee.pt.ik.R"
# MH_KNEE_CONTROLLER_L = "knee.pt.ik.L"
# MH_LEG_CONTROLLERS = [
#                       MH_LEG_CONTROLLER_R,
#                       MH_LEG_CONTROLLER_L,
#                       MH_KNEE_CONTROLLER_R,
#                       MH_KNEE_CONTROLLER_L,
#                       ]
#
# MH_CONTROLLER_JAW = "jaw"
# MH_CONTROLLER_NECK = "neck"
# MH_CONTROLLER_GAZE = "gaze"
# MH_HEAD_CONTROLLERS = [
#                         MH_CONTROLLER_JAW,
#                         MH_CONTROLLER_NECK,
#                         MH_CONTROLLER_GAZE
#                         ]
#
# MH_ROOT_CONTROLLER = "root"
# MH_UPCHEST_CONTROLLER = "chest-1"
# MH_HIPS_CONTROLLER = "hips"
# MH_BODY_CONTROLLERS = [
#                         "spine",
#                         "spine-1",
#                         "chest",
#                         MH_UPCHEST_CONTROLLER,
#                         MH_ROOT_CONTROLLER,
#                         MH_HIPS_CONTROLLER
#                        ]
#
#
# MH_HAND_CONTROLLERS_R = [ "thumb.R", "index.R", "middle.R", "ring.R", "pinky.R" ]
# MH_HAND_CONTROLLERS_L = [  "thumb.L", "index.L", "middle.L", "ring.L", "pinky.L" ]
# MH_HAND_CONTROLLERS = MH_HAND_CONTROLLERS_R + MH_HAND_CONTROLLERS_L
#
#
# MH_ALL_CONTROLLERS = MH_ARM_CONTROLLERS + MH_FACIAL_CONTROLLERS + MH_LEG_CONTROLLERS + MH_HEAD_CONTROLLERS + MH_BODY_CONTROLLERS + MH_HAND_CONTROLLERS


# MH_EU_MOUTH_RETRACTION = "Mhsmouth_retraction"


# MH_HAND_BONES_base = [
#     "palm_ring",
#     "f_ring.01",
#     "f_ring.02",
#     "f_ring.03",
#     "thumb.01",
#     "thumb.02",
#     "thumb.03",
#     "palm_index",
#     "f_index.01",
#     "f_index.02",
#     "f_index.03",
#     "palm_middle",
#     "f_middle.01",
#     "f_middle.02",
#     "f_middle.03",
#     "palm_pinky",
#     "f_pinky.01",
#     "f_pinky.02",
#     "f_pinky.03",
# ]


# MH_HAND_BONES_R = [ b+".R" for b in MH_HAND_BONES_base]
# MH_HAND_BONES_L = [ b+".L" for b in MH_HAND_BONES_base]
# MH_HAND_BONES = MH_HAND_BONES_R + MH_HAND_BONES_L
#
# MH_SHOULDER_BONE_base = "upper_arm"
# MH_ELBOW_BONE_base = "forearm"
# MH_WRIST_BONE_base = "hand"
#
# MH_FOREARM_BONE_base = "forearm"
#
# MH_ALL_BONES = MH_HAND_BONES_R + MH_HAND_BONES_L


# FaceShift Studio v2014.1, 51 channels
# This is the order the blendsheps are received from FaceShift.
# BLEND_SHAPE_NAMES_FS2014_1 = [
#     "EyeBlink_L",
#     "EyeBlink_R",
#     "EyeSquint_L",
#     "EyeSquint_R",
#     "EyeDown_L",
#     "EyeDown_R",
#     "EyeIn_L",
#     "EyeIn_R",
#     "EyeOpen_L",
#     "EyeOpen_R",
#     "EyeOut_L",
#     "EyeOut_R",
#     "EyeUp_L",
#     "EyeUp_R",
#     "BrowsD_L",
#     "BrowsD_R",
#     "BrowsU_C",
#     "BrowsU_L",
#     "BrowsU_R",
#     "JawOpen",
#     "LipsTogether",
#     "JawLeft",
#     "JawRight",
#     "JawFwd",
#     "LipsUpperUp_L",
#     "LipsUpperUp_R",
#     "LipsLowerDown_L",
#     "LipsLowerDown_R",
#     "LipsUpperClose",
#     "LipsLowerClose",
#     "MouthSmile_L",
#     "MouthSmile_R",
#     "MouthDimple_L",
#     "MouthDimple_R",
#     "LipsStretch_L",
#     "LipsStretch_R",
#     "MouthFrown_L",
#     "MouthFrown_R",
#     "MouthPress_L",
#     "MouthPress_R",
#     "LipsPucker",
#     "LipsFunnel",
#     "MouthLeft",
#     "MouthRight",
#     "ChinLowerRaise",
#     "ChinUpperRaise",
#     "Sneer_L",
#     "Sneer_R",
#     "Puff",
#     "CheekSquint_L",
#     "CheekSquint_R"]

# Customized version, to better accomodate the rig offered by MHX2 0.24. The number of channels is 51 - 8 + 3 = 46
# Differences with the default Rig profile are marked as comment
# 10 Faceshift control channels, to operate eyelids.
# They are mapped to the rotation of the eyelid controllers on the face.
# The key if the FaceShift channel name.
# The data is a list of 4 vectors, each one an XYZ euler angles triplet.
# The order of application is defined in the 'MakeHumanTools.MH_EYELID_CONTROLLERS' list.
# FS_TO_MH_EYELIDS_ROTATION_FS2014_1 = {
#
#     # Handled by the
#     "EyeBlink_R": [(0.0, 0.0, 0.0), (0.436, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#     "EyeBlink_L": [(0.436, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#     "EyeSquint_R": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (-0.156, 0.0, 0.0), ],
#     "EyeSquint_L": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (-0.156, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#     "EyeDown_R": [(0.0, 0.0, 0.0), (0.188, 0.0, 0.0), (0.0, 0.0, 0.0), (0.409, 0.0, 0.0), ],
#     "EyeDown_L": [(0.188, 0.0, 0.0), (0.0, 0.0, 0.0), (0.409, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#     #    "EyeIn_L",     # can't be done in MakeHuman rig
#     #    "EyeIn_R",     # can't be done in MakeHuman rig
#     "EyeOpen_R": [(0.0, 0.0, 0.0), (-0.516, 0.0, 0.0), (0.0, 0.0, 0.0), (0.147, 0.0, 0.0), ],
#     "EyeOpen_L": [(-0.516, 0.0, 0.0), (0.0, 0.0, 0.0), (0.147, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#     #    "EyeOut_L",    # can't be done in MakeHuman rig
#     #    "EyeOut_R",    # can't be done in MakeHuman rig
#     "EyeUp_R": [(0.0, 0.0, 0.0), (-0.516, 0.0, 0.0), (0.0, 0.0, 0.0), (-0.049, 0.0, 0.0), ],
#     "EyeUp_L": [(-0.516, 0.0, 0.0), (0.0, 0.0, 0.0), (-0.049, 0.0, 0.0), (0.0, 0.0, 0.0), ]
# }

# This dictionay maps the full value (1.0) of a FaceShift control-- channel to a set of vectors to apply to the MakeHuman face control rig.
# They are 36 (46 total - 10 for the eyelids) FaceShift control channels.
# The key if the FaceShift channel name.
# The data is a list of 25 XYZ vectors.
# The order of application is defined in the 'MakeHumanTools.MH_FACIAL_CONTROLLERS' list.
# FS_TO_MH_FACECONTROLLERS_TRANSLATION_FS2014_1 = {
#
#     "BrowsD_R": [(0.0, 0.0, 0.1), (0.0, 0.0, 0.0), (0.0, 0.0, 0.25), (0.0, 0.0, 0.0), (0.0, 0.0, 0.15), (0.0, 0.0, 0.0),
#                  (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                  (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                  (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                  (0.0, 0.0, 0.0), ],
#     "BrowsD_L": [(0.0, 0.0, 0.1), (0.0, 0.0, 0.25), (0.0, 0.0, 0.0), (0.0, 0.0, 0.15), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                  (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                  (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                  (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                  (0.0, 0.0, 0.0), ],
#
#     # ,"BrowsU_C"     : [ (0.0,0.0,0.0), (0.0,0.0,-0.25), (0.0,0.0,-0.25), (0.0,0.0,0.05), (0.0,0.0,0.05), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0),  ],
#     "BrowsU_C": [(0.000, 0.000, 0.000), (0.000, 0.000, -0.150), (0.000, 0.000, -0.150), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), ],
#     # ,"BrowsU_L"     : [ (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,-0.25), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0),  ]
#     "BrowsU_L": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, -0.150),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), ],
#     # ,"BrowsU_R"     : [ (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,-0.25), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0), (0.0,0.0,0.0),  ],
#     "BrowsU_R": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, -0.150), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                  (0.000, 0.000, 0.000), ],
#     "BrowsSqueeze": [(0.000, 0.000, 0.150), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), ],
#     "JawOpen": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                 (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.100, 0.0, 0.0),
#                 (-0.100, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                 (0.0, 0.0, 0.060), (0.0, 0.0, 0.060), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                 (0.100, 0.0, 0.0), (-0.100, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.25), ],
#     #   ,"LipsTogether",    # Can't be done in MakeHuman rig
#     "JawChew": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.180), (0.000, 0.000, 0.100), (0.000, 0.000, 0.100), (0.000, 0.000, -0.077),
#                 (0.000, 0.000, -0.220), (0.000, 0.000, -0.220), (0.000, 0.000, 0.000), (0.000, 0.000, 0.060),
#                 (0.000, 0.000, 0.060), (0.050, 0.000, 0.000), (-0.050, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.035), ],
#     #    "JawLeft", # handled with bones
#     #    "JawRight", # handled with bones
#     #    "JawFwd",  # Can't be done in MakeHuman rig
#
#     "LipsUpperUp_L": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, -0.25), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, 0.025), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, -0.06), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#     "LipsUpperUp_R": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, -0.25),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.025), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, -0.06), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#     "LipsLowerDown_L": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                         (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                         (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                         (0.0, 0.0, 0.0), (0.0, 0.0, 0.25), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                         (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.006), ],
#     "LipsLowerDown_R": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                         (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                         (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                         (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.25), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                         (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.006), ],
#     "LipsUpperClose": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                        (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                        (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.25), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                        (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                        (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#     "LipsLowerClose": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                        (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                        (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                        (0.0, 0.0, 0.150), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                        (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#
#     "MouthSmile_L": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (-0.150, 0.000, -0.150), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.100), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.020),
#                      (0.000, 0.000, -0.025), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (-0.200, 0.000, -0.060),
#                      (0.000, 0.000, 0.000), (-0.120, 0.000, -0.250), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), ],
#     "MouthSmile_R": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.150, 0.000, -0.150),
#                      (0.000, 0.000, 0.100), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.020),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, -0.025), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.200, 0.000, -0.060), (0.000, 0.000, 0.000), (0.120, 0.000, -0.250), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), ],
#     "MouthDimple_L": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (-0.100, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.050), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.050), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (-0.200, 0.0, -0.025),
#                       (0.0, 0.0, 0.0), (-0.200, 0.0, -0.150), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#     "MouthDimple_R": [(0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.0), (0.100, 0.0, 0.0), (0.0, 0.0, 0.050), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.0, 0.0, 0.050), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0),
#                       (0.200, 0.0, -0.025), (0.0, 0.0, 0.0), (0.200, 0.0, -0.150), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0), ],
#
#     "LipsStretch_L": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (-0.100, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (-0.150, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (-0.250, 0.000, 0.180), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), ],
#     "LipsStretch_R": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.100, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.150, 0.000, 0.000), (0.000, 0.000, 0.000), (0.250, 0.000, 0.180), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), ],
#     "MouthFrown_L": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.050), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (-0.150, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (-0.085, 0.000, 0.170), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), ],
#     "MouthFrown_R": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.050), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.150, 0.000, 0.000), (0.000, 0.000, 0.000), (0.085, 0.000, 0.170), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), ],
#     "MouthPress_L": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (-0.150, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, -0.080), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, -0.075),
#                      (0.000, 0.000, 0.000), (-0.050, 0.000, -0.200), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), ],
#     "MouthPress_R": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.150, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), (0.000, 0.000, -0.080), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, -0.075), (0.000, 0.000, 0.000), (0.050, 0.000, -0.200), (0.000, 0.000, 0.000),
#                      (0.000, 0.000, 0.000), ],
#
#     "LipsPucker": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, -0.250), (0.000, 0.000, 0.070), (0.000, 0.000, 0.070), (0.000, 0.000, -0.220),
#                    (0.000, 0.000, -0.050), (0.000, 0.000, -0.050), (0.000, 0.000, -0.180), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), (0.170, 0.000, 0.000), (-0.170, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.005), ],
#     "LipsFunnel": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, -0.200), (0.000, 0.000, -0.100), (0.000, 0.000, -0.100), (0.000, 0.000, -0.020),
#                    (0.000, 0.000, 0.100), (0.000, 0.000, 0.100), (0.000, 0.000, -0.250), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), (0.200, 0.000, 0.000), (-0.200, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), ],
#     "MouthLeft": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                   (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                   (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                   (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                   (0.000, 0.000, 0.000), (0.000, 0.000, -0.100), (0.000, 0.000, 0.000), (-0.100, 0.000, -0.060),
#                   (0.000, 0.000, 0.000), (-0.180, 0.000, -0.250), (-0.150, 0.000, -0.080), (0.000, 0.000, 0.000),
#                   (0.000, 0.000, 0.000), ],
#     "MouthRight": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, -0.100), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                    (0.100, 0.000, -0.060), (0.150, 0.000, -0.080), (0.180, 0.000, -0.250), (0.000, 0.000, 0.000),
#                    (0.000, 0.000, 0.000), ],
#     "ChinLowerRaise": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, -0.220),
#                        (0.000, 0.000, -0.200), (0.000, 0.000, -0.200), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), (0.000, 0.000, -0.050), (0.000, 0.000, -0.050), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), ],
#     "ChinUpperRaise": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.050), (0.000, 0.000, -0.210), (0.000, 0.000, -0.210), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), (0.000, 0.000, -0.050), (0.000, 0.000, -0.050), (0.000, 0.000, 0.000),
#                        (0.000, 0.000, 0.000), ],
#     "Sneer_L": [(0.000, 0.000, 0.200), (0.000, 0.000, 0.050), (0.000, 0.000, 0.050), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, -0.250), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), ],
#     "Sneer_R": [(0.000, 0.000, 0.200), (0.000, 0.000, 0.050), (0.000, 0.000, 0.050), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, -0.250), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                 (0.000, 0.000, 0.000), ],
#     "Puff": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#              (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#              (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (-0.250, 0.000, 0.000), (0.250, 0.000, 0.000),
#              (0.000, 0.000, -0.098), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, -0.103),
#              (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#              (0.000, 0.000, 0.000), (0.112, 0.000, 0.000), (-0.112, 0.000, 0.000), (0.000, 0.000, 0.000),
#              (0.000, 0.000, 0.000), ],
#     "CheekSquint_L": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.050),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, -0.250), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), ],
#     "CheekSquint_R": [(0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.050), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, -0.250),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000), (0.000, 0.000, 0.000),
#                       (0.000, 0.000, 0.000), ]
#
# }

# This applies the FaceShift channel values to the Fce control rig using the manually calibrated mapping matrix
# def Face2Rig(target_object, bs_names, bs_vals):
#     # Prepare the accumulation vector: a list of 20 3D vectors
#     n_of_displacements = len(MH_FACIAL_CONTROLLERS)
#     # print("this should be 25: " + str(n_of_displacements))
#
#     # The starting value is a 0-vector that will be summed with values from the mapping
#     displacements = [mathutils.Vector((0, 0, 0)) for i in range(n_of_displacements)]
#     # print("also this should be 20: " + str(len(displacements)) )
#
#     jaw_rot_z = 0  # degrees
#
#     # For each channel (bs_name), look-up the mapping vector in the dictionary and add to the accumulator.
#     for bs_name, bs_val in zip(bs_names, bs_vals):
#
#         # Quick skip if the faceshift blendshape is not having influence
#         # No. If it is at 0, it means that we want to put the value of the blandshapes back to 0.
#         # if(bs_val == 0):
#         #    continue
#
#         #
#         # Special case for Jaw bone rotation
#         if (bs_name == "JawLeft"):
#             jaw_rot_z += bs_val * 8  # 5 degrees is the max side jaw extension
#             continue
#         elif (bs_name == "JawRight"):
#             jaw_rot_z += bs_val * (-8)  # 5 degrees is the max side jaw extension
#             continue
#
#         if (not bs_name in FS_TO_MH_FACECONTROLLERS_TRANSLATION):
#             # print("No mapping for " + bs_name)
#             continue
#
#         # Take the list of displacement triplets for this blend shape. Remember that the list is composed of 3-sized sequences, not vectors.
#         bs_disps = FS_TO_MH_FACECONTROLLERS_TRANSLATION[bs_name]
#         # print("++This should be 20: " + str(len(bs_disps)))
#
#         # print(" =========== For "+bs_name+" at "+str(bs_val))
#
#         # Accumulate
#         # displacements_avg_counters = [ 0 for i in range(len(displacements)) ] # will keep the counter for the average calculator
#         for tot_bs_disp, bs_disp in zip(displacements, bs_disps):
#             # print("Adding " + str(bs_disp) + " to " + str(tot_bs_disp))
#
#             # Modulate according to blend shape value
#             rig_displacement_vect = mathutils.Vector(bs_disp) * bs_val
#
#             # Add to the total
#             tot_bs_disp += rig_displacement_vect
#
#             # print("For "+bs_name+" at "+str(bs_val))
#             # print("   " + str(rig_displacement_vect) + " --> "  +str (tot_bs_disp) )
#
#     # print("  ==> Total on disp[1] " + str(displacements[1]) )
#
#     # Take reference to the rig bones...
#     bones = bpy.data.objects[target_object].pose.bones
#
#     # ... set Jaw bone rotation
#     bones[MH_CONTROLLER_JAW].rotation_mode = 'XYZ'
#     bones[MH_CONTROLLER_JAW].rotation_euler.z = math.radians(jaw_rot_z)
#
#     LOG_BASE = 3.5
#
#     # ... and copy the displacement vectors in them.
#     for i, rig_name in enumerate(MH_FACIAL_CONTROLLERS):
#         # if(displacements[i].length > 0.25):
#         #    print("Saturation for " + rig_name +": "+ str(displacements[i].length))
#
#         # Set the value
#         # print("Setting " + rig_name + "("+str(i)+") to "+str(displacements[i]))
#         bones[rig_name].location.xyz = displacements[i]

# def Eyelids2Rig(target_object, bs_names, bs_vals):
#     # Prepare the accumulation vector: a list of 4 3D vectors (each is a XYZ rotation)
#     n_of_controllers = len(MH_EYELID_CONTROLLERS)
#
#     # The starting value is a 0-vector that will be summed with values from the mapping
#     displacements = [mathutils.Vector((0, 0, 0)) for i in range(n_of_controllers)]
#
#     # For each channel (bs_name), look-up the mapping vector in the dictionary and
#     # add to the accumulator.
#     for bs_name, bs_val in zip(bs_names, bs_vals):
#
#         if (not bs_name in FS_TO_MH_EYELIDS_ROTATION_FS2014_1):
#             continue
#
#         # print("Eyelids2Rig: computing rotation for blendshape "+bs_name+ "\t"+str(bs_val))
#
#         # Take the list of displacement triplets for this blend shape.
#         # Remember that the list is composed of 3-sized sequences, not vectors.
#         bs_disps = FS_TO_MH_EYELIDS_ROTATION_FS2014_1[bs_name]
#         # print("++This should be 20: " + str(len(bs_disps)))
#
#         # print(" =========== For "+bs_name+" at "+str(bs_val))
#
#         # Accumulate
#         for tot_bs_disp, bs_disp in zip(displacements, bs_disps):
#             # print("Adding " + str(bs_disp) + " to " + str(tot_bs_disp))
#
#             # Modulate according to blend shape value
#             rig_displacement_vect = mathutils.Vector(bs_disp) * bs_val
#
#             # Add to the total
#             tot_bs_disp += rig_displacement_vect
#
#     # Take reference to the rig bones...
#     bones = bpy.data.objects[target_object].pose.bones
#
#     # ... and copy the displacement vectors in them.
#     for i, rig_name in enumerate(MH_EYELID_CONTROLLERS):
#         # print(rig_name+"\t"+str(displacements[i]))
#         bones[rig_name].rotation_mode = 'XYZ'
#         bones[rig_name].rotation_euler = displacements[i]

# XZ_mirror_matrix = mathutils.Matrix.Rotation(0, 3, 'X')
# XZ_mirror_matrix[0] = [1, 0, 0]
# XZ_mirror_matrix[1] = [0, -1, 0]
# XZ_mirror_matrix[2] = [0, 0, -1]
#
#
# def HeadRot2Rig(target_object, head_rotation_quat):
#     # Take reference to the rig bones...
#     bones = bpy.data.objects[target_object].pose.bones
#
#     bones[MH_CONTROLLER_NECK].rotation_mode = 'QUATERNION'
#     bones[MH_CONTROLLER_NECK].rotation_quaternion = (
#                 XZ_mirror_matrix * head_rotation_quat.to_matrix() * XZ_mirror_matrix.inverted()).to_quaternion()


BLEND_SHAPE_NAMES = [
    "EyeBlink_L",
    "EyeBlink_R",
    "EyeSquint_L",
    "EyeSquint_R",
    "EyeDown_L",
    "EyeDown_R",
    "EyeIn_L",
    "EyeIn_R",
    "EyeOpen_L",
    "EyeOpen_R",
    "EyeOut_L",
    "EyeOut_R",
    "EyeUp_L",
    "EyeUp_R",
    "BrowsD_L",
    "BrowsD_R",
    "BrowsU_C",
    "BrowsU_L",
    "BrowsU_R",
    # "BrowsSqueeze",  # not in faceshift
    "JawOpen",
    # "JawChew",      # not in faceshift
    "LipsTogether",
    "JawLeft",
    "JawRight",
    "JawFwd",
    "LipsUpperUp_L",
    "LipsUpperUp_R",
    "LipsLowerDown_L",
    "LipsLowerDown_R",
    "LipsUpperClose",
    "LipsLowerClose",
    "MouthSmile_L",
    "MouthSmile_R",
    "MouthDimple_L",
    "MouthDimple_R",
    "LipsStretch_L",
    "LipsStretch_R",
    "MouthFrown_L",
    "MouthFrown_R",
    "MouthPress_L",
    "MouthPress_R",
    "LipsPucker",
    "LipsFunnel",
    "MouthLeft",
    "MouthRight",
    "ChinLowerRaise",
    "ChinUpperRaise",
    "Sneer_L",
    "Sneer_R",
    # "Sneer",  # not in faceshift
    "Puff",
    "CheekSquint_L",
    "CheekSquint_R"]


# def EyesRot2Skeleton(target_object, leye_theta, leye_phi, reye_theta, reye_phi):
#     # print(str(leye_theta) + "\t" + str(leye_phi))
#
#     # print("eyes IN: "+ str(leye_theta) +"\t"+ str(leye_phi))
#     # Take reference to the rig bones...
#     # bones = bpy.data.objects[target_object].pose.bones
#
#     # import pymel.core as pm
#     #
#     # jointsList = pm.ls(type="joint")
#     # bones = []
#     # # print(jointsList)
#     # for j in jointsList:
#
#     # gaze_bone = bones[MH_CONTROLLER_GAZE]
#     gaze_bone = 'gaze'
#
#     # This is the matrix of the Gaze at "stand position". Constant. Might be computed only once at initialization.
#     gaze_stand_matrix = gaze_bone.matrix * gaze_bone.matrix_basis.inverted()
#     # print(str(gaze_stand_matrix))
#
#     GAZE_DISTANCE = 6  # The distance of the Gaze controller from the eye
#     # The rotation of the Neck bone (hence, the head) is stored in the rotation of its parent bone: DEF-chest-1.
#     head_absolute_rotation = bones["DEF-chest-1"].rotation_quaternion
#
#     eye_rot_euler = mathutils.Euler((math.radians(leye_theta), 0, math.radians(-leye_phi)), 'XYZ')
#
#     # new_gaze_absolute_direction = head_matrix.to_quaternion() * eye_rot_euler.to_quaternion() * mathutils.Vector((0, -GAZE_DISTANCE, 0))
#     new_gaze_absolute_direction = head_absolute_rotation * eye_rot_euler.to_quaternion() * mathutils.Vector((0, -GAZE_DISTANCE, 0))
#
#     # print("eyes out1:" + str(head_absolute_rotation) +"\t"+ str(eye_rot_euler) +"\t"+ str(new_gaze_absolute_direction))
#
#     # new_gaze_absolute_location = bones["Eye_L"].matrix.to_translation() + new_gaze_absolute_direction
#     new_gaze_absolute_location = bones["DEF-eye.L"].matrix.to_translation() + new_gaze_absolute_direction
#
#     new_gaze_location = gaze_stand_matrix * new_gaze_absolute_location
#
#     # print("Eyes OUT " + str(new_gaze_absolute_location) +"\t"+ str(new_gaze_location))
#
#     gaze_bone.location = new_gaze_location


def decode_faceshift_datastream(target_object, data):
    """Takes as input the bytes of a binary DataStream received via network.
    If it is a Tracking State block (ID 33433) then extract some data (info, blendshapes, markers, ...) and applies it to the MakeHuman skeleton.
    """

    # block_id = struct.unpack_from('H', data)
    # print("Received block id " + str(block_id)) ;

    offset = 0
    print("Decoding the data:......")
    block_id, version, block_size = struct.unpack_from('HHI', data, offset)

    print("ID, v, size = " + str(block_id) + "," + str(version) + "," + str(block_size))

    offset += 8
    blend_line, eyesRot = '', ''  # , neck_bone_rotation ='', ''
    if (block_id == BLOCK_ID_TRACKING_STATE):
        n_blocks, = struct.unpack_from('H', data, offset)
        print("n_blocks = " + str(n_blocks))
        offset += 2

        track_ok = 0  # Will be a byte: 1 if tracking ok, 0 otherwise.
        # head_rotation_quat = None  # Will be filled with the rotation using mathutils.Quaternion
        blend_shape_values = []  # Will be a list of float in the range 0-1
        # eyes_values = None          # Will be a sequence of 4 angle values
        # markers_position = []  # Will be a list of mathutils.Vector

        curr_block = 0
        while (curr_block < n_blocks):
            block_id, version, block_size = struct.unpack_from('HHI', data, offset)

            print("ID, v, size = " + str(block_id) + "," + str(version) + "," + str(block_size))

            # put the offset at the beginning of the block
            offset += 8

            if (block_id == 101):  # Frame Information blobk (timestamp and tracking status)
                ts, track_ok = struct.unpack_from('dB', data, offset)
                print("timestamp, track_ok " + str(ts) + ", " + str(track_ok))
                # offset += 9
            #             elif (block_id == 102):  # Pose block (head rotation and position)
            #                 x, y, z, w = struct.unpack_from('ffff', data, offset)
            #                 # head_rotation_quat = MQuaternion(x, y, z, w)  #  converted w, x, y, z
            # ############################'''neck bone rotation  taken from the ni mate data'''
            #                 neck_bone_rotation = str(round(x, 7))+','+str(round(y, 7))+','+str(round(z, 7))+','+str(round(w, 7))

            elif (block_id == 103):  # Blendshapes block (blendshape values)
                n_coefficients, = struct.unpack_from('I', data, offset)
                print("Blend shapes count=" + str(n_coefficients))
                i = 0
                # coeff_list = ""
                while (i < n_coefficients):
                    # Offset of the block, plus the 4 bytes for int n_coefficients, plus 4 bytes per float
                    val, = struct.unpack_from('f', data, offset + 4 + (i * 4))
                    blend_shape_values.append(val)  # is a list of values between 0 to 1
                    # coeff_list += repr(val) + " "
                    i += 1
                # print("Values: " + coeff_list)
            elif (block_id == 104):  # Eyes block (eyes gaze)
                leye_theta, leye_phi, reye_theta, reye_phi = struct.unpack_from('ffff', data, offset)
                ##############################'''  eyesRot '''
                eyesRot = str(round(leye_theta, 7)) + ',' + str(round(leye_phi, 7)) + ',' + str(
                    round(reye_theta, 7)) + ',' + str(round(reye_phi, 7))

            # elif (block_id == 105):  # Markers block (absolute position of mark points)
            #     n_markers, = struct.unpack_from('H', data, offset)
            #     # print("n markers="+str(n_markers))
            #     i = 0
            #     while (i < n_markers):
            #         # Offset of the block, plus the 2 bytes for int n_markers, plus 4 bytes for each x,y,z floats
            #         x, y, z = struct.unpack_from('fff', data, offset + 2 + (i * 4 * 3))
            #         # print("m" + str(i) + " " + str(x) + "\t" + str(y) + "\t" + str(z))
            #         # markers_position.append(mathutils.Vector((x, y, z)))
            #         i += 1

            curr_block += 1
            offset += block_size

        # end -- while on blocks. Track State scan complete

        # Handle EYELIDS
        if (track_ok == 1):
            # Eyelids2Rig(target_object, BLEND_SHAPE_NAMES, blend_shape_values)
            for bs_name, bs_val in zip(BLEND_SHAPE_NAMES, blend_shape_values):
                ################ blendShapesValues
                blend_line += str(round(bs_val, 7)) + ','

        # if (track_ok == 1):
        # Face2Rig(target_object, BLEND_SHAPE_NAMES, blend_shape_values)
        # pass

        # Handle HEAD ROTATION
        # if (track_ok == 1):
        #     if (head_rotation_quat != None):
        #         HeadRot2Rig(target_object, head_rotation_quat)
        #         pass

        # if (track_ok == 1):
        #     EyesRot2Skeleton(target_object, leye_theta, leye_phi, reye_theta, reye_phi)
        #     pass

        row0 = ''
        for i, bs_n in enumerate(BLEND_SHAPE_NAMES):
            row0 += bs_n + ','
        ######################
        row0 = row0 + 'leye_theta, leye_phi, reye_theta, reye_phi'  # +'neck_rx, neck_ry, neck_rz, neck_rw'
        rown = blend_line + eyesRot  # +neck_bone_rotation


BINDING_ADDR = '127.0.0.1'
LISTENING_PORT = 33433
BLOCK_ID_TRACKING_STATE = 33433  # According to faceshift docs

print("Creating socket...")
# The socket listening to incoming data. Its status will be always synchronized with the singleton attribute:
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# No buffer. We take the latest, if present, or nothing.
# self.sock.setsockopt(level, optname, value)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1500)

sock.connect((BINDING_ADDR, LISTENING_PORT))
print('Connected')

while True:
    msg = sock.recv(4096)
    # sock.close()  # st

    print("Received : " + str(msg))
    try:
        decode_faceshift_datastream(target_object=None, data=msg)
    except Exception as e:
        print(e)

    # if the section is None, the space is pausing and resuming the recording from the current frame
    # If a section is selected, resuming the recording restart from the beginning of the section, up to a maximum time.
    # if (context.scene.tool_settings.use_keyframe_insert_auto):
    # print(str(self.update_count) + ":\t" + str(self.frame_record_start) + "\t--> " + str(frame))
    # insert_mh_keyframe(self.target_object, bpy.context.scene.frame_current)
